#!/usr/bin/env node

/**
 * Script para testar se o build do Vercel funcionar√° corretamente
 * Execute: node test-vercel-build.js
 */

const fs = require('fs');
const path = require('path');
const { execSync } = require('child_process');

console.log('üîç Testando configura√ß√£o para Vercel...');
console.log('=' .repeat(50));

// 1. Verificar se vercel.json existe e est√° correto
console.log('1Ô∏è‚É£ Verificando vercel.json...');
try {
  const vercelConfig = JSON.parse(fs.readFileSync('vercel.json', 'utf8'));
  
  // Verificar se tem as rotas necess√°rias
  const hasSPARoute = vercelConfig.routes?.some(route => 
    route.src === '/(.*)' && route.dest === '/index.html'
  );
  
  if (hasSPARoute) {
    console.log('‚úÖ vercel.json configurado corretamente para SPA');
  } else {
    console.log('‚ùå vercel.json n√£o tem rota SPA configurada');
  }
  
  // Verificar se tem configura√ß√£o de assets
  const hasAssetsRoute = vercelConfig.routes?.some(route => 
    route.src?.includes('assets') || route.src?.includes('\\.(js|css|png|jpg)')
  );
  
  if (hasAssetsRoute) {
    console.log('‚úÖ Configura√ß√£o de assets encontrada');
  } else {
    console.log('‚ö†Ô∏è Configura√ß√£o de assets pode estar incompleta');
  }
  
} catch (error) {
  console.log('‚ùå Erro ao ler vercel.json:', error.message);
}

// 2. Verificar se _redirects existe
console.log('\n2Ô∏è‚É£ Verificando _redirects...');
const redirectsPath = path.join('public', '_redirects');
if (fs.existsSync(redirectsPath)) {
  console.log('‚úÖ Arquivo _redirects encontrado');
} else {
  console.log('‚ùå Arquivo _redirects n√£o encontrado');
}

// 3. Verificar package.json
console.log('\n3Ô∏è‚É£ Verificando package.json...');
try {
  const packageJson = JSON.parse(fs.readFileSync('package.json', 'utf8'));
  
  if (packageJson.scripts?.build) {
    console.log('‚úÖ Script de build encontrado');
  } else {
    console.log('‚ùå Script de build n√£o encontrado');
  }
  
  if (packageJson.scripts?.['vercel-build']) {
    console.log('‚úÖ Script vercel-build encontrado');
  } else {
    console.log('‚ö†Ô∏è Script vercel-build n√£o encontrado (opcional)');
  }
  
} catch (error) {
  console.log('‚ùå Erro ao ler package.json:', error.message);
}

// 4. Verificar se dist/ existe (ap√≥s build)
console.log('\n4Ô∏è‚É£ Verificando pasta dist...');
if (fs.existsSync('dist')) {
  console.log('‚úÖ Pasta dist encontrada');
  
  // Verificar se tem index.html
  if (fs.existsSync('dist/index.html')) {
    console.log('‚úÖ index.html encontrado');
  } else {
    console.log('‚ùå index.html n√£o encontrado');
  }
  
  // Verificar se tem assets
  if (fs.existsSync('dist/assets')) {
    console.log('‚úÖ Pasta assets encontrada');
  } else {
    console.log('‚ö†Ô∏è Pasta assets n√£o encontrada');
  }
  
} else {
  console.log('‚ö†Ô∏è Pasta dist n√£o encontrada - execute npm run build primeiro');
}

// 5. Verificar configura√ß√£o do Vite
console.log('\n5Ô∏è‚É£ Verificando vite.config.ts...');
try {
  const viteConfig = fs.readFileSync('vite.config.ts', 'utf8');
  
  if (viteConfig.includes('build:')) {
    console.log('‚úÖ Configura√ß√£o de build encontrada');
  } else {
    console.log('‚ö†Ô∏è Configura√ß√£o de build pode estar incompleta');
  }
  
  if (viteConfig.includes('rollupOptions')) {
    console.log('‚úÖ Rollup options configuradas');
  } else {
    console.log('‚ö†Ô∏è Rollup options n√£o configuradas');
  }
  
} catch (error) {
  console.log('‚ùå Erro ao ler vite.config.ts:', error.message);
}

// 6. Testar build (se n√£o existir dist)
console.log('\n6Ô∏è‚É£ Testando build...');
if (!fs.existsSync('dist')) {
  try {
    console.log('Executando npm run build...');
    execSync('npm run build', { stdio: 'inherit' });
    console.log('‚úÖ Build executado com sucesso');
  } catch (error) {
    console.log('‚ùå Erro no build:', error.message);
  }
} else {
  console.log('‚úÖ Build j√° existe');
}

// 7. Verificar se h√° erros de sintaxe
console.log('\n7Ô∏è‚É£ Verificando erros de sintaxe...');
try {
  execSync('npm run lint', { stdio: 'pipe' });
  console.log('‚úÖ Sem erros de linting');
} catch (error) {
  console.log('‚ö†Ô∏è Erros de linting encontrados (pode n√£o afetar o deploy)');
}

console.log('\nüéâ Verifica√ß√£o conclu√≠da!');
console.log('\nüìã Pr√≥ximos passos:');
console.log('1. Fa√ßa commit das altera√ß√µes');
console.log('2. Push para o GitHub');
console.log('3. Aguarde o redeploy no Vercel');
console.log('4. Teste todas as rotas do seu site');
