#!/usr/bin/env node

/**
 * Script para verificar configura√ß√£o de dom√≠nio no Vercel
 * Execute: node verificar-dominio.js seu-dominio.com
 */

const https = require('https');
const dns = require('dns').promises;

async function verificarDominio(dominio) {
  console.log(`üîç Verificando dom√≠nio: ${dominio}`);
  console.log('=' .repeat(50));

  try {
    // 1. Verificar se o dom√≠nio resolve
    console.log('1Ô∏è‚É£ Verificando resolu√ß√£o DNS...');
    const enderecos = await dns.resolve4(dominio);
    console.log(`‚úÖ DNS resolve para: ${enderecos.join(', ')}`);

    // 2. Verificar se √© um IP do Vercel
    const ipsVercel = ['76.76.19.61', '76.76.21.61'];
    const isVercel = enderecos.some(ip => ipsVercel.includes(ip));
    
    if (isVercel) {
      console.log('‚úÖ Dom√≠nio aponta para Vercel');
    } else {
      console.log('‚ö†Ô∏è Dom√≠nio n√£o aponta para Vercel');
    }

    // 3. Verificar HTTPS
    console.log('\n2Ô∏è‚É£ Verificando HTTPS...');
    await verificarHTTPS(dominio);

    // 4. Verificar www
    console.log('\n3Ô∏è‚É£ Verificando subdom√≠nio www...');
    const wwwDominio = `www.${dominio}`;
    try {
      const wwwEnderecos = await dns.resolve4(wwwDominio);
      console.log(`‚úÖ www.${dominio} resolve para: ${wwwEnderecos.join(', ')}`);
    } catch (error) {
      console.log(`‚ö†Ô∏è www.${dominio} n√£o resolve`);
    }

    // 5. Verificar certificado SSL
    console.log('\n4Ô∏è‚É£ Verificando certificado SSL...');
    await verificarCertificadoSSL(dominio);

    console.log('\nüéâ Verifica√ß√£o conclu√≠da!');

  } catch (error) {
    console.error('‚ùå Erro ao verificar dom√≠nio:', error.message);
  }
}

function verificarHTTPS(dominio) {
  return new Promise((resolve, reject) => {
    const options = {
      hostname: dominio,
      port: 443,
      path: '/',
      method: 'GET',
      timeout: 10000
    };

    const req = https.request(options, (res) => {
      console.log(`‚úÖ HTTPS funcionando - Status: ${res.statusCode}`);
      console.log(`‚úÖ Servidor: ${res.headers.server || 'Desconhecido'}`);
      resolve();
    });

    req.on('error', (error) => {
      console.log(`‚ùå HTTPS n√£o funcionando: ${error.message}`);
      reject(error);
    });

    req.on('timeout', () => {
      console.log('‚è∞ Timeout na verifica√ß√£o HTTPS');
      req.destroy();
      reject(new Error('Timeout'));
    });

    req.end();
  });
}

function verificarCertificadoSSL(dominio) {
  return new Promise((resolve, reject) => {
    const options = {
      hostname: dominio,
      port: 443,
      method: 'GET',
      timeout: 10000
    };

    const req = https.request(options, (res) => {
      const cert = res.connection.getPeerCertificate();
      if (cert && cert.valid_to) {
        const validTo = new Date(cert.valid_to);
        const now = new Date();
        const daysLeft = Math.ceil((validTo - now) / (1000 * 60 * 60 * 24));
        
        console.log(`‚úÖ Certificado SSL v√°lido at√©: ${validTo.toLocaleDateString()}`);
        console.log(`‚úÖ Dias restantes: ${daysLeft}`);
        console.log(`‚úÖ Emissor: ${cert.issuer?.CN || 'Desconhecido'}`);
      }
      resolve();
    });

    req.on('error', (error) => {
      console.log(`‚ùå Erro no certificado SSL: ${error.message}`);
      reject(error);
    });

    req.on('timeout', () => {
      console.log('‚è∞ Timeout na verifica√ß√£o do certificado');
      req.destroy();
      reject(new Error('Timeout'));
    });

    req.end();
  });
}

// Verificar se foi fornecido um dom√≠nio
const dominio = process.argv[2];

if (!dominio) {
  console.log('‚ùå Uso: node verificar-dominio.js seu-dominio.com');
  console.log('üìù Exemplo: node verificar-dominio.js meusite.com.br');
  process.exit(1);
}

// Validar formato do dom√≠nio
const dominioRegex = /^[a-zA-Z0-9][a-zA-Z0-9-]{0,61}[a-zA-Z0-9]?\.[a-zA-Z]{2,}$/;
if (!dominioRegex.test(dominio)) {
  console.log('‚ùå Formato de dom√≠nio inv√°lido');
  console.log('üìù Use: meusite.com.br ou meusite.com');
  process.exit(1);
}

verificarDominio(dominio);
