#!/usr/bin/env node

/**
 * Script para corrigir erro 404 no Vercel
 * Execute: node fix-vercel-404.js
 */

import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

console.log('üîß Aplicando corre√ß√£o para erro 404 no Vercel...');
console.log('=' .repeat(50));

// 1. Backup do vercel.json atual
console.log('1Ô∏è‚É£ Fazendo backup do vercel.json atual...');
try {
  const currentConfig = fs.readFileSync('vercel.json', 'utf8');
  fs.writeFileSync('vercel.json.backup', currentConfig);
  console.log('‚úÖ Backup criado: vercel.json.backup');
} catch (error) {
  console.log('‚ö†Ô∏è N√£o foi poss√≠vel fazer backup:', error.message);
}

// 2. Aplicar configura√ß√£o robusta
console.log('\n2Ô∏è‚É£ Aplicando configura√ß√£o robusta...');
try {
  const robustConfig = fs.readFileSync('vercel-robust.json', 'utf8');
  fs.writeFileSync('vercel.json', robustConfig);
  console.log('‚úÖ Configura√ß√£o robusta aplicada');
} catch (error) {
  console.log('‚ùå Erro ao aplicar configura√ß√£o:', error.message);
  process.exit(1);
}

// 3. Verificar se _redirects existe
console.log('\n3Ô∏è‚É£ Verificando arquivo _redirects...');
const redirectsPath = path.join('public', '_redirects');
if (fs.existsSync(redirectsPath)) {
  console.log('‚úÖ Arquivo _redirects j√° existe');
} else {
  console.log('üìù Criando arquivo _redirects...');
  const redirectsContent = `# Redirects para SPA (Single Page Application)
# Todas as rotas que n√£o s√£o arquivos est√°ticos devem redirecionar para index.html

# Assets est√°ticos
/assets/* /assets/:splat 200
/*.js /:splat 200
/*.css /:splat 200
/*.png /:splat 200
/*.jpg /:splat 200
/*.jpeg /:splat 200
/*.gif /:splat 200
/*.ico /:splat 200
/*.svg /:splat 200
/*.woff /:splat 200
/*.woff2 /:splat 200
/*.ttf /:splat 200
/*.eot /:splat 200

# Rotas espec√≠ficas do SPA
/admin /index.html 200
/contato /index.html 200
/catalogo /index.html 200
/promocoes /index.html 200
/favoritos /index.html 200
/pedidos /index.html 200
/auth /index.html 200
/produto/* /index.html 200
/checkout/* /index.html 200

# Todas as outras rotas para index.html (SPA)
/* /index.html 200`;

  // Criar pasta public se n√£o existir
  if (!fs.existsSync('public')) {
    fs.mkdirSync('public', { recursive: true });
  }
  
  fs.writeFileSync(redirectsPath, redirectsContent);
  console.log('‚úÖ Arquivo _redirects criado');
}

// 4. Verificar se h√° erros de sintaxe no App.tsx
console.log('\n4Ô∏è‚É£ Verificando App.tsx...');
try {
  const appContent = fs.readFileSync('src/App.tsx', 'utf8');
  
  // Verificar se h√° erros de sintaxe comuns
  if (appContent.includes('<Route path="/checkout/pending"')) {
    console.log('‚ö†Ô∏è Poss√≠vel erro de sintaxe encontrado em App.tsx');
    console.log('üìù Verificando linha 79...');
    
    // Verificar se a linha est√° completa
    const lines = appContent.split('\n');
    const line79 = lines[78]; // linha 79 (√≠ndice 78)
    
    if (line79 && !line79.includes('element={<CheckoutPending />}')) {
      console.log('‚ùå Erro de sintaxe encontrado na linha 79');
      console.log('üîß Corrigindo...');
      
      const correctedContent = appContent.replace(
        /<Route path="\/checkout\/pending"[\s\S]*?<Route path="\/logout-test"/,
        '<Route path="/checkout/pending" element={<CheckoutPending />} />\n                        <Route path="/logout-test"'
      );
      
      fs.writeFileSync('src/App.tsx', correctedContent);
      console.log('‚úÖ Erro de sintaxe corrigido');
    } else {
      console.log('‚úÖ App.tsx parece estar correto');
    }
  } else {
    console.log('‚úÖ App.tsx parece estar correto');
  }
} catch (error) {
  console.log('‚ùå Erro ao verificar App.tsx:', error.message);
}

// 5. Criar arquivo de teste para verificar se funciona
console.log('\n5Ô∏è‚É£ Criando arquivo de teste...');
const testContent = `<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Teste Vercel SPA</title>
</head>
<body>
    <h1>Teste de Roteamento SPA</h1>
    <p>Se voc√™ est√° vendo esta p√°gina, o roteamento SPA est√° funcionando!</p>
    <script>
        console.log('‚úÖ SPA funcionando corretamente');
    </script>
</body>
</html>`;

fs.writeFileSync('public/test-spa.html', testContent);
console.log('‚úÖ Arquivo de teste criado: public/test-spa.html');

// 6. Resumo das altera√ß√µes
console.log('\nüéâ Corre√ß√£o aplicada com sucesso!');
console.log('\nüìã Altera√ß√µes realizadas:');
console.log('‚úÖ vercel.json atualizado com configura√ß√£o robusta');
console.log('‚úÖ Arquivo _redirects criado/verificado');
console.log('‚úÖ App.tsx verificado e corrigido se necess√°rio');
console.log('‚úÖ Arquivo de teste criado');

console.log('\nüöÄ Pr√≥ximos passos:');
console.log('1. Fa√ßa commit das altera√ß√µes:');
console.log('   git add .');
console.log('   git commit -m "Fix: Corrigir erro 404 no Vercel - Configura√ß√£o robusta"');
console.log('   git push');
console.log('');
console.log('2. Aguarde o redeploy no Vercel');
console.log('');
console.log('3. Teste as rotas:');
console.log('   - /admin');
console.log('   - /contato');
console.log('   - /catalogo');
console.log('   - /promocoes');
console.log('');
console.log('4. Se ainda der erro, use a configura√ß√£o alternativa:');
console.log('   cp vercel-robust.json vercel.json');
console.log('   git add vercel.json && git commit -m "Fix: Usar configura√ß√£o robusta" && git push');
