// Script para testar as corre√ß√µes de conectividade
import { createClient } from '@supabase/supabase-js';

// Configura√ß√µes do Supabase
const supabaseUrl = 'https://fflomlvtgaqbzrjnvqaz.supabase.co';
const supabaseKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImZmbG9tbHZ0Z2FxYnpyam52cWF6Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTc1NjI2MjcsImV4cCI6MjA3MzEzODYyN30.AjI-ZeoLswTl9D7EsjW1y2vZoctX0CSDI2B_FVXKkd4';

const supabase = createClient(supabaseUrl, supabaseKey);

async function testConnectivityFixes() {
  console.log('üß™ Testando corre√ß√µes de conectividade...\n');

  try {
    // 1. Testar conectividade b√°sica
    console.log('1. Testando conectividade b√°sica...');
    const { data: healthCheck, error: healthError } = await supabase
      .from('profiles')
      .select('count')
      .limit(1);
    
    if (healthError) {
      console.error('‚ùå Erro de conectividade:', healthError.message);
    } else {
      console.log('‚úÖ Conectividade b√°sica OK\n');
    }

    // 2. Testar autentica√ß√£o
    console.log('2. Testando sistema de autentica√ß√£o...');
    const { data: session, error: sessionError } = await supabase.auth.getSession();
    
    if (sessionError) {
      console.error('‚ùå Erro na sess√£o:', sessionError.message);
    } else {
      if (session.session) {
        console.log('‚úÖ Sess√£o ativa encontrada para:', session.session.user.email);
      } else {
        console.log('‚ÑπÔ∏è Nenhuma sess√£o ativa (esperado para teste)');
      }
    }
    console.log('');

    // 3. Testar requisi√ß√µes REST
    console.log('3. Testando requisi√ß√µes REST...');
    try {
      const response = await fetch(`${supabaseUrl}/rest/v1/profiles?select=count`, {
        method: 'GET',
        headers: {
          'apikey': supabaseKey,
          'Authorization': `Bearer ${supabaseKey}`,
          'Content-Type': 'application/json'
        }
      });
      
      if (response.ok) {
        console.log('‚úÖ Requisi√ß√µes REST funcionando');
      } else {
        console.log('‚ö†Ô∏è Requisi√ß√µes REST com problemas:', response.status, response.statusText);
      }
    } catch (error) {
      console.error('‚ùå Erro nas requisi√ß√µes REST:', error.message);
    }
    console.log('');

    // 4. Testar endpoints de conectividade
    console.log('4. Testando endpoints de conectividade...');
    const endpoints = [
      'https://httpbin.org/get',
      'https://api.supabase.com/health'
    ];

    for (const endpoint of endpoints) {
      try {
        const response = await fetch(endpoint, {
          method: 'HEAD',
          mode: 'no-cors',
          cache: 'no-cache'
        });
        console.log(`‚úÖ ${endpoint} - OK`);
      } catch (error) {
        console.log(`‚ö†Ô∏è ${endpoint} - Erro:`, error.message);
      }
    }
    console.log('');

    console.log('üéâ Testes de conectividade conclu√≠dos!');
    console.log('\nüìã Resumo:');
    console.log('- Conectividade b√°sica: Verificada');
    console.log('- Sistema de auth: Funcionando');
    console.log('- Requisi√ß√µes REST: Testadas');
    console.log('- Endpoints externos: Testados');

  } catch (error) {
    console.error('‚ùå Erro durante os testes:', error.message);
  }
}

// Executar testes
testConnectivityFixes();
